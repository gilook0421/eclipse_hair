<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" "log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">

	<!-- Appenders -->
	<!-- appender name="console" class="">
		<param name="Target" value="System.out" /-->
	<appender name="console" class="org.apache.log4j.ConsoleAppender">
		<layout class="org.apache.log4j.PatternLayout">
			<!-- <param name="ConversionPattern" value="%-5p: %c - %m%n" />default -->
			<!-- 
			* 로그레벨, 출력시간, 스레드번호 설정
			* %-5p : 로그의 레벨
			* %d{yyyy-MM-dd HH:mm:ss} : 년월일시분초 형식의 일시
			* %t : 스레드번호
			 -->
			<!-- param name="ConversionPattern" value="[%-5p: %d{yyyy-MM-dd HH:mm:ss}][%t] %c - %m%n" /-->
			<param name="ConversionPattern" value="[%d{yyyy-MM-dd HH:mm:ss}] %-5p [%C] [%L] - %m%n" />
		</layout>
	</appender> 
	<!--  
	 %p  debug, info, warn, error, fatal 등의 priority 가 출력된다.  
	 %m  로그내용이 출력됩니다 
	 %d  로깅 이벤트가 발생한 시간을 기록합니다.
	     포맷은 %d{HH:mm:ss, SSS}, %d{yyyy MMM dd HH:mm:ss, SSS}같은 형태로 사용하며 
	     SimpleDateFormat에 따른 포맷팅을 하면 된다 
	 %t  로그이벤트가 발생된 쓰레드의 이름을 출력합니다.  
	 %%  % 표시를 출력하기 위해 사용한다.  
	 %n  플랫폼 종속적인 개행문자가 출력된다. \r\n 또는 \n 일것이다.  
	 %c  카테고리를 표시합니다 
	     예) 카테고리가 a.b.c 처럼 되어있다면 %c{2}는 b.c가 출력됩니다. 
	 %C  클래스명을 포시합니다. 
	     예)클래스구조가 org.apache.xyz.SomeClass 처럼 되어있다면 
	     %C{2}는 xyz.SomeClass 가 출력됩니다 
	 %F  로깅이 발생한 프로그램 파일명을 나타냅니다. 
	 %l  로깅이 발생한 caller의 정보를 나타냅니다 
	 %L  로깅이 발생한 caller의 라인수를 나타냅니다 
	 %M  로깅이 발생한 method 이름을 나타냅니다. 
	 %r  어플리케이션 시작 이후 부터 로깅이 발생한 시점의 시간(milliseconds) 
	 %x  로깅이 발생한 thread와 관련된 NDC(nested diagnostic context)를 출력합니다. 
	 %X  로깅이 발생한 thread와 관련된 MDC(mapped diagnostic context)를 출력합니다.
	  -->
	  <!-- 
	# FaTAL : 가장 크리티컬한 에러가 일어 났을 때 사용합니다.
	# ERROR : 일반 에러가 일어 났을 때 사용합니다.
	# WARN : 에러는 아니지만 주의할 필요가 있을 때 사용합니다.
	# INFO : 일반 정보를 나타낼 때 사용합니다.
	# DEbUG : 일반 정보를 상세히 나타낼 때 사용합니다.
	 -->
	<!-- 
	# Daily file log
	log4j.appender.logfile=org.apache.log4j.DailyRollingFileAppender
	log4j.appender.logfile.File=${catalina.home}/logs/changpd.log
	log4j.appender.logfile.DatePattern='.'yyyy-MM-dd
	log4j.appender.logfile.layout=org.apache.log4j.PatternLayout
	log4j.appender.logfile.layout.ConversionPattern=[%d{HH:mm:ss}][%-5p](%F:%L) - %m%n
	 -->

	<!-- Application Loggers 
	<logger name="hair">
		<level value="debug" />
	</logger>-->
	
	<!-- 3rdparty Loggers 
	<logger name="org.springframework.core">
		<level value="debug" />
	</logger>
	
	<logger name="org.springframework.beans">
		<level value="debug" />
	</logger>
	
	<logger name="org.springframework.context">
		<level value="debug" />
	</logger>

	<logger name="org.springframework.web">
		<level value="debug" />
	</logger>-->
	
	<!-- log4jdbc
	jdbc.sqlonly : SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다.
	jdbc.sqltiming : SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다.
	jdbc.audit : ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. 많은 양의 로그가 생성되므로 특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다.
	jdbc.resultset : ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성된다.
	jdbc.resultsettable : SQL 결과 조회된 데이터의 table을 로그로 남긴다.
	jdbc.connection : 열려있는 모든 번호와 연결 수립 및 해제 이벤트를 기록. 이는 연결 문제를 찾아내는데 매우 유용 (Connection Pool 설정)
	 -->
	<logger name="jdbc.connection" additivity="false">
	    <level value="ERROR"/>
	    <appender-ref ref="console"/>
	</logger>
	
	<logger name="jdbc.audit" additivity="false">
	    <level value="ERROR"/>
	    <appender-ref ref="console"/>
	</logger>
	
	<logger name="jdbc.sqlonly" additivity="false">
	    <level value="ERROR"/>
	    <appender-ref ref="console"/>
	</logger>
	
	<logger name="jdbc.sqltiming" additivity="false">
	    <level value="INFO"/>
	    <appender-ref ref="console"/>
	</logger>
	
	<logger name="jdbc.resultset" additivity="false">
	    <level value="ERROR"/>
	    <appender-ref ref="console"/>
	</logger>
	
	<logger name="jdbc.resultsettable" additivity="false">
	    <level value="ERROR"/>
	    <appender-ref ref="console"/>
	</logger>
	<!-- //log4jdbc -->

	<!-- Root Logger -->
	<root>
		<priority value="debug" />
		<appender-ref ref="console" />
	</root>
	
</log4j:configuration>
