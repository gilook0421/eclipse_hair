<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	
	<!-- response type JSON.
	<beans:bean id="jsonView" class="org.springframework.web.servlet.view.json.MappingJacksonJsonView">
		<beans:property name="contentType" value="application/json;charset=UTF-8" ></beans:property>
	</beans:bean> -->
	
	<context:component-scan base-package="hair" />

	<!--<annotation-driven>
		<argument-resolvers>
			<beans:bean class="hair.support.BaseController"></beans:bean>
			<beans:bean class="hair.support.RequestMapArgumentResolver"></beans:bean>
		</argument-resolvers>
	</annotation-driven> -->
	<!-- interceptor -->
	
	<interceptors>
		<interceptor>
			<!-- spring FrameWork. 3.1과 3.2의 버전마다 차이가 있는데, spring 3.2의 경우는 dispatcher-context.xml 
				파일에 다음과 같이 설정해 주면 됨. 하지만 3.1의 경우는 exclude-mapping을 지원해 주지 않으므로, Interceptor클래스에서 
				별도의 처리를 거쳐주어야 한다. -->
			<!-- <mvc:mapping path="/list.do" /> <mvc:mapping path="/write.do" /> 
				<mvc:mapping path="/view.do" /> -->

			<!-- 위에 3개를 한번에 쓰는법 모든것에 interceptor를 적용한다 -->
			<mapping path="/**" />
			<!-- <exclude-mapping path="/resources/**" />-->
			<beans:bean id="controllerInterceptor" class="hair.support.LoggingInterceptor" />
		</interceptor>

	</interceptors>
	
	<!-- tiles를 처리하도록 또 다른 뷰 리졸버(UrlBasedViewResolver) 등록 -->
	<!-- 이 때 기본 뷰 리졸버(InternalResourceViewResolver)를 제공하지 않으므로 해당 리졸버를 따로 등록해줘야한다. -->
	<!-- 또한 UrlBasedViewResolver 는 기본 리졸버보다 우선적으로 적용되어야 하기 때문에 order 를 기본 리졸버보다 순위를 높여준다-->
	<beans:bean  class="org.springframework.web.servlet.view.UrlBasedViewResolver">
	  <beans:property name="order" value="1"/>    
	  <beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView"/>   
	</beans:bean>
	<!-- tiles사용을 위한 bean등록-->
	<beans:bean class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
	  <beans:property name="definitions">
	   <beans:list>
	    <beans:value>/WEB-INF/tiles/tiles.xml</beans:value> <!-- layouts.xml 의 위치를 임의로 설정 -->
	   </beans:list>
	  </beans:property>
	</beans:bean>      
    <beans:bean id="tilesViewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
        <beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView" />
        <beans:property name="order" value="1" />
    </beans:bean>
	

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="2" />
	</beans:bean>

    <beans:bean id="sqlSessionFactory" class="hair.support.RefreshableSqlSessionFactoryBean">
        <beans:property name="dataSource" ref="dataSource" />
        <beans:property name="typeAliasesPackage" value="hair"/>
        <beans:property name="configLocation" value="classpath:mybatis-config.xml" />
        <beans:property value="classpath:sql/**/*.xml" name="mapperLocations" />
    </beans:bean>
    
</beans:beans>
